/* Позволим Vue создать основной график*/
let namechart = new Vue({
  el: '#container',  /* Свяжем с одноименным блоком*/
  methods: {  /* Реализуем область действия метода*/
    visual:
    /* Функция для прорисовки основного графика с помощью библиотеки Highcharts */
      function chart() {
        Highcharts.chart('container', {
          chart: {
            type: 'area'  /* Установим тип графика */
          },
          title: {
            text: 'Урожайность семян на Луне' /* Установим заголовок */
          },
          subtitle: {
            text: 'по мотивам книги "Незнайка на Луне"' /* Установим подзаголовок */
          },
          xAxis: {
            categories: ['2025', '2026', '2027', '2028'], /* Установим нижние значения данных (период) */
            title: {
              text: 'годы' /* Установим "легенду" для нижних данных */
            }
          },
          yAxis: {
            title: {
              text: 'шт./м2' /* Установим "легенду" для боковых данных */
            },
            tickInterval: 10 /* Установим шаг для боковых данных */
          },
          credits: {
            enabled: false  /* Уберем встроенную ссылку в библиотеке */
          },
          plotOptions: {
            area: {
              fillOpacity: 0.7, /* Перейдем к общим опциям. Установим прозрачность графиков */
              lineWidth: 1, /* Установим видимость линии графиков*/ 
              marker: {
                lineWidth: 1, /* Уберем видимость маркеров графиков*/
              }
            }
          },
          series: [{ /* Перейдем к данным основного графика */
            name: 'Пшеница', /* Установим имя графика */
            data: [49, 48, 53, 43], /* Установим данные за каждый период соответсвенно */
            color: '#00bfff', /* Установим цвет графика */
        }, {
            name: 'Гречиха',
            data: [35, 29, 38, 30],
            color: '#d0f0c0'
        }, {
            name: 'Ячмень',
            data: [21, 12, 13, 15],
            color: '#866f9e'
           },]
        });
      }
  }
})
/* Зададим регулярное выражение, которое будет использоваться для валидации. В массив ввел конкретные необходимые символы, 
чтобы, например, можно было использовать символ "-" или скобки в названии семени */
let BadName = /['0-9','`','~','!','@','#',';','$','%','^','&','?','*','_','+','=','{','}','|','>','<','.',',']/;
/* Функция валидации данных форм, вызываемая по клику на кнопку */
function ValidForm() {
  if (nameg.value === "" || num1.value === "" || num2.value === "" || 
  num3.value === "" || num4.value === "") {   /* Если значения в формах пустые вызовем окно, если заполнены - продолжим дальше */
    alert("Введите данные!");
    } else if(BadName.test(nameg.value)){ /* Если значения в форме ввода названия семени содержат данные 
        из регулярного выражения, вызовем окно, если не содержат - продолжим дальше */
        alert('Введены запрещенные символы в названии семени!');
      } 
/* Далее будем вызовать окна для каждой формы ввода количества семян отдельно, если все хорошо - продолжаем 
Максимальное значение - 100. Потому что больше, уже как-то слишком много для коротышек!*/
        else if(num1.value < 0){  
          alert('Введите положительное число!');
        } else if(num1.value > 100){
            alert('Введено слишком большое количество семян!');
          } else if(num2.value < 0){
              alert('Не вводите отрицательные значения!');
            } else if(num2.value > 100){
                alert('Введено слишком много семян!');
              } else if(num3.value < 0){
                  alert('Введено значение меньше допустимого!');
                } else if(num3.value > 100){
                    alert('Введено значение больше допустимого!');
                  } else if(num4.value < 0){
                      alert('Введите корректные значения!');
                    } else if(num4.value > 100){
                        alert('Введите корректное количество семян!');
                      } else{ 
                          /* Если все данные введены корректно, произведем проверку уникальности названия семян */
                          let chart = Highcharts.charts[0]; /* Создадим переменную для работы с основным графиком */
                          let val5 = document.getElementById("nameg").value; /* Создадим переменную, содержащую значение названия семени */
                          /* Создадим цикл для перебора значений в series. Если значение уже имеется, то отчистим поле ввода названия семени. 
                          Это не позволит отправить данные дальше и создать повторный график или же пустой (из-за валидации) */
                          for (i = 0; i < chart.series.length; i++) { 
                            if (val5 == chart.series[i].name) {
                              nameg.value = "";
                            }
                          }
                        submit(); /* После всех действий, вызовем другую функцию */
                        }
}
/* Функция создания нового графика*/
function submit(){
  if(nameg.value == ""){ /* Если значение текстового поля пустое из-за повторного имени семени,
  вызовем отдельное окно и не дадим создать пустой график*/
    alert('Такое название семени существует!');
  } /* Если текстовое поле не пустое, будем строить график */
    else if(nameg.value !== ""){
      let chart = Highcharts.charts[0]; /* Создадим переменную для работы с основным графиком */
      let val5 = document.getElementById("nameg").value; /* Создадим переменную, содержащую значение названия семени повторно*/
      let val1 = parseFloat(num1.value);/* Создадим переменные содержащую значения количества семян, parseFloat необходим для числа из строки*/
      let val2 = parseFloat(num2.value);
      let val3 = parseFloat(num3.value);
      let val4 = parseFloat(num4.value);
      chart.addSeries({ /* Создаем новый график, после ввода и валидации данных с помощью addSeries*/
        type: 'area',
        data: [val1, val2, val3, val4],
        name: val5,
      });   
      nameg.value = ""; /* Почистим поля после отправки данных*/
      num1.value = "";
      num2.value = "";
      num3.value = "";
      num4.value = "";
    }
}
/* Функция рандомизации данных, вводимых в форме.Вызывается отдельной кнопкой*/
function RandomInt(){
  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;  /* Получим случайноечисло в заданном диапазоне*/
  }
  let Arr = ['Фасоль', 'Редис', 'Тыква', 'Мак', 'Томат', 'Перец', 'Укроп', 'Дыня']; /* Создадим массив из данных названий семян*/
  let RandArr = Math.floor(Math.random() * Arr.length);  /* Создадим переменную, которая хранит случайный элемент массива */
  /* Вставим полученные данные в формы и зададим числовым данным диапазон для функции рандомизации*/
  document.getElementById('nameg').value = Arr[RandArr];
  document.getElementById('num1').value = getRandomInt (0, 100);
  document.getElementById('num2').value = getRandomInt (0, 100);
  document.getElementById('num3').value = getRandomInt (0, 100);
  document.getElementById('num4').value = getRandomInt (0, 100);
}
/* Позволим Vue вызывать наши функции при клике на кнопки*/
let fun =  new Vue({
  el: '#Just',    /* Передаем наш id */
  methods: {       /* Реализуем область действия методов */
    Valid:  /* Valid содержит функцию валидации и создания гарфиков*/
      function () {
        ValidForm()
      },
    Random: /* Random содержит функцию рандомизации данных*/
      function () {
        RandomInt()
      }
  }
})
